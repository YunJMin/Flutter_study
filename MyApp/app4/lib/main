// Navigator
/*네비게이터는 모든 페이지를 관리하며 스택이라는
자료구조 형식으로 라우터 개체들을 관리하는 것
자료구조를 관리하기 위해서 푸시와 팝이라는 메소드를 제공
*/
/*
1. Route의 개념
  - 스마트폰 상에서 보여지는 하나의 페이지
2. Navigator의 정의와 Push, pop 함수, stack 자료구조
  - 스택을 관리하기 위해 푸시라는 메소드가 사용(쌓이는것에)
  - 반대로 팝은 없애기 위해
3. MaterialPageRoute위젯과 context
4. 페이지 이동 가능 구현 완성
*/

import 'package:flutter/material.dart';
void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Snack Bar',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: FirstPage(),
    );
  }
}

class FirstPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('First Page'),
        centerTitle: true,
      ),
      body: Center(
        child: MaterialButton(
            child: Text('Go to the Second page'),
            onPressed: () {
              Navigator.push(context,
                  MaterialPageRoute(builder: (_) => SecondPage()));
            }),
      ),
    );
  }
}

class SecondPage extends StatelessWidget {
  @override
  Widget build(BuildContext ctx) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Second Page'),
        centerTitle: true,
      ),
      body: Center(
        child: MaterialButton(
          child: Text('Go to the First page'),
          onPressed: () {
            Navigator.pop(ctx);
          },
        ),
      ),
    );
  }
}